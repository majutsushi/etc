if [[ "$TERM" == xterm-kitty ]]; then
    local kitty_focused=$(kitty @ ls | jq ".[].tabs[] | select(.windows[].is_self == true) | .is_focused")
    [[ $kitty_focused == false ]] && return 1
elif [[ -n "${DISPLAY}" ]]; then
    local activewin=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)
    local -l curwin="0x$(print $(( [##16] 10#${WINDOWID} )) )"

    [[ $activewin != ${curwin} ]] && return 1
elif [[ -n "$ITERM_SESSION_ID" ]]; then
    local is_app_focused=$(osascript -e 'tell application "iTerm" to frontmost')
    [[ $is_app_focused != true ]] && return 1

    local focused_session=$(osascript 2>/dev/null <<EOF
        tell application "iTerm"
            id of current session of first window whose frontmost is true
        end tell
EOF
)
    local this_session=$(echo $ITERM_SESSION_ID | cut -d':' -f 2)

    [[ $focused_session != $this_session ]] && return 1
else
    return 0
fi

[[ -z "$TMUX" ]] && return 0

local out="$(=tmux list-panes -a -F '#{pane_id} #{pane_active} #{window_id}' | =grep "$TMUX_PANE ")"
local -a paneinfo
paneinfo=(${(z)out})
[[ ${paneinfo[2]} == "0" ]] && return 1

out="$(=tmux list-windows -a -F '#{window_id} #{window_active}' | =grep "${paneinfo[3]} ")"
local -a wininfo
wininfo=(${(z)out})
[[ ${wininfo[2]} == "1" ]]

# vim: filetype=zsh
