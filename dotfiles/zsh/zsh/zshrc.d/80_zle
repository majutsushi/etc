## keybindings (run 'bindkeys' for details, more details via man zshzle)

autoload add-zle-hook-widget

# Initialization taken from Debian's /etc/zsh/zshrc
typeset -A key
key=(
    BackSpace  "${terminfo[kbs]}"
    Home       "${terminfo[khome]}"
    End        "${terminfo[kend]}"
    Insert     "${terminfo[kich1]}"
    Delete     "${terminfo[kdch1]}"
    Up         "${terminfo[kcuu1]}"
    Down       "${terminfo[kcud1]}"
    Left       "${terminfo[kcub1]}"
    Right      "${terminfo[kcuf1]}"
    PageUp     "${terminfo[kpp]}"
    PageDown   "${terminfo[knp]}"
)

function bind2maps () {
    local i sequence widget
    local -a maps

    while [[ "$1" != "--" ]]; do
        maps+=( "$1" )
        shift
    done
    shift

    sequence="${key[$1]}"
    widget="$2"

    [[ -z "$sequence" ]] && return 1

    for i in "${maps[@]}"; do
        bindkey -M "$i" "$sequence" "$widget"
    done
}

bind2maps emacs             -- BackSpace   backward-delete-char
bind2maps       viins       -- BackSpace   vi-backward-delete-char
bind2maps             vicmd -- BackSpace   vi-backward-char
bind2maps emacs             -- Home        beginning-of-line
bind2maps       viins vicmd -- Home        vi-beginning-of-line
bind2maps emacs             -- End         end-of-line
bind2maps       viins vicmd -- End         vi-end-of-line
bind2maps emacs viins       -- Insert      overwrite-mode
bind2maps             vicmd -- Insert      vi-insert
bind2maps emacs             -- Delete      delete-char
bind2maps       viins vicmd -- Delete      vi-delete-char
bind2maps emacs viins vicmd -- Up          up-line-or-history
bind2maps emacs viins vicmd -- Down        down-line-or-history
bind2maps emacs             -- Left        backward-char
bind2maps       viins vicmd -- Left        vi-backward-char
bind2maps emacs             -- Right       forward-char
bind2maps       viins vicmd -- Right       vi-forward-char

unfunction bind2maps
unset key

line-init-keypad() { printf '%s' ${terminfo[smkx]}; }
add-zle-hook-widget line-init line-init-keypad
line-finish-keypad() { printf '%s' ${terminfo[rmkx]}; }
add-zle-hook-widget line-finish line-finish-keypad


# Use prefix search for Ctrl-p/n
autoload up-line-or-beginning-search
zle -N up-line-or-beginning-search
bindkey '^p' up-line-or-beginning-search
bindkey -M menuselect '^p' up-line-or-search
autoload down-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^n' down-line-or-beginning-search
bindkey -M menuselect '^n' down-line-or-search

# make incremental search work in completion menus
bindkey -M menuselect '^r' history-incremental-search-backward
bindkey -M menuselect '^s' history-incremental-search-forward

autoload smart-insert-last-word
zle -N insert-last-word smart-insert-last-word

autoload -Uz transpose-words-match
zstyle ':zle:transpose-words' word-style shell
zle -N transpose-words transpose-words-match
bindkey '\et' transpose-words

# turn current line into comment and commit
bindkey '\e#' pound-insert

autoload -Uz jump-target
zle -N jump-target
bindkey '^Xj' jump-target

# define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
# also see select-word-style in zshcontrib
#  WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
#  WORDCHARS=.
#  WORDCHARS='*?_[]~=&;!#$%^(){}'
#  WORDCHARS='${WORDCHARS:s@/@}'

# only slash and equals should be considered as a word separator:
slash-backward-kill-word() {
    local WORDCHARS="${${WORDCHARS:s@/@}:s@=@}"
    # zle backward-word
    zle backward-kill-word
}
zle -N slash-backward-kill-word
# press esc-w (meta-w) to delete a word until its last '/'
# (not the same as ctrl-w!)
bindkey '^[w' slash-backward-kill-word
bindkey '^\b' slash-backward-kill-word

autoload rationalize-dots
zle -N rationalize-dots
bindkey . rationalize-dots
bindkey -M isearch . self-insert

# we don't want to quote/espace URLs on our own...
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# escape extended-glob characters for git refspecs
autoload -Uz git-escape-magic
git-escape-magic

autoload -U insert-files
zle -N insert-files
bindkey "^Xf" insert-files

# press esc-e for editing command line in $EDITOR or $VISUAL
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

bindkey '^[q' push-line-or-edit

autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey "^[m" copy-earlier-word

# run command line as user root via sudo:
_sudo-command-line() {
    [[ $BUFFER != sudo\ * ]] && LBUFFER="sudo $LBUFFER"
}
zle -N sudo-command-line _sudo-command-line
bindkey "^Xs" sudo-command-line

autoload insert-unicode-char
zle -N insert-unicode-char
bindkey '^Xi' insert-unicode-char

# Move by physical lines, like gj/gk in vim
_physical_up_line()   { zle backward-char -n $COLUMNS }
_physical_down_line() { zle forward-char  -n $COLUMNS }
zle -N physical-up-line _physical_up_line
zle -N physical-down-line _physical_down_line
# bindkey "\e[1;3A" physical-up-line
# bindkey "\e[1;3B" physical-down-line
bindkey "\eK" physical-up-line
bindkey "\eJ" physical-down-line

# http://zshwiki.org/home/examples/zleiab
typeset -Ag abbreviations
abbreviations=(
    'L'  '| less'
    'G'  '| g'
    'ND' '*(/om[1])' # newest directory
    'NF' '*(.om[1])' # newest file
)
magic-abbrev-expand() {
    local MATCH
    # make sure the abbreviation is preceded by a space
    if [[ "$LBUFFER" =~ " ([_a-zA-Z0-9]+)$" ]]; then
        LBUFFER=${LBUFFER%%$match[1]}
        LBUFFER+=${abbreviations[$match[1]]:-$match[1]}
    fi
    zle self-insert
}
zle -N magic-abbrev-expand
bindkey ' ' magic-abbrev-expand
bindkey -M isearch ' ' self-insert

_normalize_prompt() {
    [[ -n $TTY ]] || return
    [[ -n $terminfo ]] && {
        echoti rmacs
        echoti sgr0
        echoti cnorm
    } > $TTY 2> /dev/null
    stty sane -ixoff -ixon
    # Disable mouse tracking
    printf '\x1b[?1000l'
    printf '\x1b[?1002l'
    printf '\x1b[?1003l'
    printf '\x1b[?1006l'
    printf '\x1b[?1015l'
    # Use normal screen
    # Causes issues in some embedded terminals like VS Code
    # printf '\x1b[?1049l'
}
add-zsh-hook precmd _normalize_prompt


# jump behind the first word on the cmdline to add options
function _jump_after_first_word() {
    local words
    words=(${(z)BUFFER})

    if (( ${#words} <= 1 )) ; then
        CURSOR=${#BUFFER}
    else
        CURSOR=${#${words[1]}}
    fi
}
zle -N _jump_after_first_word
bindkey '^X1' _jump_after_first_word

help-glob() {
    zle -M "\
    /   directories               *      executable plain files
    .   plain files               r,w,x  owner-readable/writable/executable
    @   symbolic links            A,I,E  group-readable/writable/executable
    =   sockets                   R,W,X  world-readable/writable/executable
    p   named pipes (FIFOs)       s,S,t  setuid/setgid/sticky files
    %   device files              f[+=-]NNN   files with access rights +/-/= NNN
    %b  block special files       U,G         owned by effective (U)ser/(G)roup
    %c  character special files   {u,g}NNN    owned by user, group id 'NNN'
                                  {u,g}:name: owned by user, group name 'name'

    m[dMwhms][-|+]n files modified up to (-) or before (+) n
                    days/months/weeks/hours/minutes/seconds (ago)
    i,I    case insensitive/sensitive
    ^      negates all qualifiers following it
    -      operate on symlink targets
    N      sets the NULL_GLOB option for the current pattern
    D      sets the GLOB_DOTS option for the current pattern
    n      sets the NUMERIC_GLOB_SORT option for the current pattern
    oc     sort by c: name(n)/size(L)/modification time(m)/subdirs first(d)
    Oc     same as above, but descending
    [beg[,end]] limit list of returned filenames
    ,      separate 'or'ed qualifiers

    P:string:   prepend: *(P:-f:) --> -f file1 -f file2
    e:string:   execute string as shell code and check return status;
                use "'$REPLY'" and set "'$REPLY'" (string) or "'$reply'" (array)
                *(e:"''"'"'reply=(${REPLY}{1,2})'"'"''":) --> lonely1 lonely2

  print *(m-1)          # Files modified up to a day ago
  print *(a1)           # Files accessed a day ago
  print *(@)            # Just symlinks
  print *(Lk+50)        # Files bigger than 50 kilobytes
  print *(Lk-50)        # Files smaller than 50 kilobytes
  print **/*.c~file.c   # Same as above, but excluding 'file.c'
  print (foo|bar).*     # Files starting with 'foo' or 'bar'
  print *~*.*           # All Files that do not contain a dot
  chmod 644 *(.^x)      # make all plain non-executable files publically readable
  print -l *(.c|.h)     # Lists *.c and *.h
  print **/*(g:users:)  # Recursively match all files that are owned by group 'users'
  echo /proc/*/cwd(:h:t:s/self//) # Analogous to >ps ax | awk "''"'"'{print $1}'"'"''"<"
}
zle -N help-glob
bindkey '^Xg' help-glob

# vim: filetype=zsh ts=8 sts=4 sw=4
