# CTRL-T - Paste the selected file path(s) into the command line
__fsel() {
    set -o nonomatch
    eval $FZF_DEFAULT_COMMAND | fzf --multi | while read item; do
        printf '%q ' "$item"
    done
    local ret=$?
    echo
    return $ret
}

fzf-file-widget() {
    LBUFFER="${LBUFFER}$(__fsel)"
    local ret=$?
    zle redisplay
    typeset -f zle-line-init >/dev/null && zle zle-line-init
    return $ret
}
zle     -N   fzf-file-widget
bindkey '^T' fzf-file-widget

# ALT-C - cd into the selected directory
fzf-cd-widget() {
    cd "${$(set -o nonomatch; \
        command find * \( -path '*/\.*' -o -path '*/ivy/*.cache' -o -name target \) -prune -o -type d -print 2> /dev/null \
        | fzf):-.}"
    local ret=$?
    for func in $precmd_functions; do
        $func
    done
    zle reset-prompt
    typeset -f zle-line-init >/dev/null && zle zle-line-init
    return $ret
}
zle     -N    fzf-cd-widget
bindkey '\ec' fzf-cd-widget

# CTRL-R - Paste the selected command from history into the command line
if have fzf; then
    fzf-history-widget() {
        NUMERIC=0 zle set-local-history
        LBUFFER+=$(fc -l 1 | fzf --exact --no-sort --nth=2.. --tac --tiebreak=index --bind=ctrl-r:toggle-sort | sed "s/^ *[0-9*]* *//")
        local ret=$?
        zle redisplay
        typeset -f zle-line-init >/dev/null && zle zle-line-init
        return $ret
    }
    zle -N fzf-history-widget
    bindkey '^r' fzf-history-widget
fi


RECENTDIRS_FILE="$ZSH_VAR_LIB_DIR/recent-dirs"
chpwd_add_recent_dir() {
    if [[ "$PWD" != $HOME ]]; then
        print -P '0\t%D{%s}\t1\t%~' >>| "$RECENTDIRS_FILE"
    fi
}
add-zsh-hook chpwd chpwd_add_recent_dir

j() {
    # adapted from http://chneukirchen.org/blog/archive/2017/01/zz-a-smart-and-efficient-directory-changer.html
    awk -v ${(%):-now='%D{%s}'} < "$RECENTDIRS_FILE" '
        BEGIN { FS="\t" }
        function r(t, f) {
            age = now - t
            return (age < 3600) ? f * 4 : (age < 86400) ? f * 2 : (age < 604800) ? f / 2 : f / 4
        }
        { f[$4] += $3; if ($2 > l[$4]) l[$4] = $2 }
        END { for (i in f) printf("%d\t%d\t%d\t%s\n", r(l[i], f[i]), l[i], f[i], i) }' | \
            sort -k2 -n -r | head -n 9000 | sort -n -r -o "$RECENTDIRS_FILE"
    cd ${~:-"$(cat "$RECENTDIRS_FILE" | cut -d$'\t' -f4- | fzf --exact --no-sort)"}
}

J() {
    cd "$(hash -d | sed -e 's/^.*=//' | fzf --exact)"
}

v() {
    local viminfo="$HOME/.var/lib/vim/viminfo"

    sed -r -n -e 's/^> //p'  ~/.var/lib/vim/viminfo | tac | while read line; do
        [[ -f "${line/\~/$HOME/}" ]] || continue
        [[ "${line//*\//}" == COMMIT_EDITMSG ]] && continue

        echo $line
    done | fzf
}

copy-pw() {
    lpass show --clip --password $(lpass ls | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}


# Git completion from
# https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236

_is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

fzf-git() {
    fzf --height 50% --preview-window right:50% "$@"
}

# files
_fzf_gf() {
    _is_in_git_repo || return
    git -c color.status=always status --short |
        fzf-git -m --ansi --nth 2..,.. \
            --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
        cut -c4- | sed 's/.* -> //'
}

# branches
_fzf_gb() {
    _is_in_git_repo || return
    git branch -a --color=always | grep -v '/HEAD\s' | sort |
        fzf-git --ansi --multi --tac --preview-window right:60% \
            --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %<(10,trunc)%an%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
        sed 's/^..//' | cut -d' ' -f1 |
        sed 's#^remotes/##'
}

# tags
_fzf_gt() {
    _is_in_git_repo || return
    git tag --sort -version:refname |
        fzf-git --multi --preview-window right:70% \
            --preview 'git show --color=always {} | head -'$LINES
}

# hashes
_fzf_gh() {
    _is_in_git_repo || return
    git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
        fzf-git --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
            --header 'Press CTRL-S to toggle sort' \
            --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
        grep -o "[a-f0-9]\{7,\}"
}

# remotes
_fzf_gr() {
    _is_in_git_repo || return
    git remote -v | awk '{print $1 "\t" $2}' | uniq |
        fzf-git --tac \
            --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
        cut -d$'\t' -f1
}

join-lines() {
    local item
    while read item; do
        echo -n "${(q)item} "
    done
}

bind-git-helper() {
    local char
    for c in $@; do
        eval "fzf-g$c-widget() { local result=\$(_fzf_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
        eval "zle -N fzf-g$c-widget"
        eval "bindkey '^g^$c' fzf-g$c-widget"
    done
}
bind-git-helper f b t r h
unset -f bind-git-helper


_fzf_compgen_path() {
    ag -g "" "$1"
}

# vim: filetype=zsh
