lazy_load() {
    local load_func=$1
    local lazy_func="lazy_${load_func}"
    shift

    eval "
        function $@ {
            for func in $@; do
                if (( \$+functions[\$func] )); then
                    unfunction \$func
                fi
            done
            eval $load_func
            unfunction $load_func
            \"\$0\" \"\$@\"
        }
    "
}
# lazy_load <slow_func> cmd1 cmd2 ...


if [[ "$INCOGNITO" != 1 ]]; then
    eval "$(atuin init zsh)"

    # Adapted from
    # https://leahneukirchen.org/blog/archive/2013/03/10-fresh-zsh-tricks-you-may-not-know.html
    autoload -Uz narrow-to-region
    _atuin_search_nested() {
        local state
        MARK=CURSOR
        narrow-to-region -S state
        LBUFFER+=$(RUST_LOG=error atuin search $* -i 3>&1 1>&2 2>&3)
        narrow-to-region -R state
        zle reset-prompt
    }
    zle -N _atuin_search_nested
    bindkey -M emacs '\er' _atuin_search_nested
    bindkey -M vicmd '\er' _atuin_search_nested
    bindkey -M viins '\er' _atuin_search_nested
fi

if have direnv; then
    eval "$(direnv hook zsh)"
fi

if have pyenv; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init - | sed s/precmd/chpwd/g)"
fi

if have mise; then
    eval "$(mise activate zsh)"
fi

export PNPM_HOME="$XDG_DATA_HOME/pnpm"
path+="$PNPM_HOME"
alias pn=pnpm

if [[ -f $HOME/.local/etc/zshrc ]]; then
    source $HOME/.local/etc/zshrc
fi
if [[ -d $HOME/.local/etc/zshrc.d ]]; then
    for file in $HOME/.local/etc/zshrc.d/??_*(N); do
        source "$file"
    done
fi

mkdir -p $HOME/.ssh/sock

[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

for patharray in path manpath library_path ld_library_path; do
    normalize_path $patharray
done

# vim: filetype=zsh
