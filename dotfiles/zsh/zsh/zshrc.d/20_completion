# https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org
# https://thevaluable.dev/zsh-completion-guide-examples/

# Whenever a command completion is attempted, make sure the entire command
# path is hashed first.
setopt hash_list_all

# If unset, the cursor is set to the end of the word if completion is
# started. Otherwise it stays there and completion is done from both ends.
setopt complete_in_word

# complete globs instead of expanding them
# use _match instead
# setopt glob_complete

# load fancy menu completion
zmodload zsh/complist

# initialize completion system
autoload -U compinit
compinit -d $ZCOMPDUMP
# Execute code that does not affect the current session in the background.
# From https://github.com/sorin-ionescu/prezto/blob/4abbc5572149baa6a5e7e38393a4b2006f01024f/runcoms/zlogin#L9-L15
{
    # Compile the completion dump to increase startup speed.
    if [[ -s "$ZCOMPDUMP" && (! -s "${ZCOMPDUMP}.zwc" || "$ZCOMPDUMP" -nt "${ZCOMPDUMP}.zwc") ]]; then
        flock -x -E 0 -n "$ZCOMPDUMP" zsh -f -c "zcompile '$ZCOMPDUMP'"
    fi
} &!


## general settings
# separate matches into groups
zstyle ':completion:*' group-name ''
# if there is more than 1 match allow selecting from a menu
zstyle ':completion:*' menu select=1
# zstyle ':completion:*' menu yes select interactive
# provide verbose completion information
zstyle ':completion:*' verbose true
# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}'
# show ignored matches if we really want to
zstyle ':completion:*' single-ignored show
# caching
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path $ZSH_CACHEDIR/zcompcache/

zstyle ':completion:*' accept-exact-dirs true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' list-dirs-first true # affects all-files/other-files
zstyle ':completion:*' ignore-parents parent pwd

# for _history_complete_word
zstyle ':completion:history-words:*' range 50000:2000
zstyle ':completion:history-words:*' remove-all-dups true

# prevent asking with many results
# zstyle ':completion:*:default' list-prompt '%p'
zstyle ':completion:*:descriptions' format $'%{\e[0;32m%}completing %B%d%b%{\e[0m%}'
zstyle ':completion:*:messages'     format '%d'
zstyle ':completion:*:warnings'     format $'%{\e[0;31m%}No matches for:%{\e[0m%} %d'
zstyle ':completion:*:options'      auto-description '%d'


## correction
# run rehash on completion so newly installed programs are found automatically
_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1 # Because we didn't really complete anything
}
zstyle -e ':completion:*' completer '
if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
    _last_try="$HISTNO$BUFFER$CURSOR"
    reply=(_complete _match _prefix)
else
    if [[ $words[1] == (rm|mv) ]]; then
        reply=(_complete)
    else
        reply=(_oldlist _force_rehash _complete _correct _approximate _ignored)
    fi
fi'
zstyle ':completion:*:match:*'     insert-unambiguous pattern
zstyle ':completion:*:match:*'     match-original true
zstyle ':completion:*:correct:*'   insert-unambiguous true
zstyle ':completion:*:correct:*'   original true
zstyle ':completion:*:correct:*'   max-errors 2
zstyle ':completion:*:corrections' format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
# allow one error for every three characters typed in approximate completer
zstyle ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'


## ZSH stuff
# complete 'cd -<tab>' with menu
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*'        tag-order indexes parameters
# define files to ignore for zcompile
zstyle ':completion:*:*:zcompile:*'           ignored-patterns '(*~|*.zwc)'
# insert all expansions for expand completer
zstyle ':completion:*:expand:*'               tag-order all-expansions
# Ignore completion functions for commands you don't have:
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'
# don't complete files already in the command line
zstyle ':completion:*:other-files' ignore-line other
zstyle ':completion:*:directories' ignore-line other
# ... except for mv and cp
zstyle ':completion:*:(mv|cp):*:other-files' ignore-line no
zstyle ':completion:*:(mv|cp):*:directories' ignore-line no
# zstyle ':completion:*:(rm|kill|diff):*' ignore-line other

# history word completion (^[/)
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' stop yes


## external commands
# describe options in full
zstyle ':completion:*:options'                      description 'yes'

# don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'
zstyle ':completion:*:*:(^rm):*:*' ignored-patterns '*(.o|~)' '#*#(D)' '*.zwc' '*.pyc' '*.pyo'
zstyle ':completion:*:*:vim:*:*' ignored-patterns $(zstyle -s ':completion:*:*:(^rm):*:*' ignored-patterns pat && echo $pat) \
    '(|**/)tags' '*.aux' '*.pdf' '*.class'

if ismac; then
    zstyle ':completion:*:processes'          command 'ps xwww  -o pid,s,%cpu,tty,stime,command'
else
    zstyle ':completion:*:processes'          command 'ps xwww --forest -o pid,s,%cpu,tty,stime,command'
fi
zstyle ':completion:*:kill:*'             force-list always
zstyle -e ':completion:*:processes' list-colors 'reply=(
    "=(#bi) #([0-9]#) #([^ ]#) #([^ ]#) #([^ ]#) #([^ ]#) ##*($PREFIX)*=0=1;31=32=35=36=33=1;32"
    "=(#bi) #([0-9]#) #([^ ]#) #([^ ]#) #([^ ]#) #([^ ]#)*=0=1;31=32=35=36=33"
)'

zstyle ':completion:*:complete:git-checkout:*' group-order heads-local
zstyle ':completion:*:*:git:*' user-commands ${${(M)${(k)commands}:#git-*}/git-/}

# complete manual by their section
zstyle ':completion:*:manuals'   separate-sections true
zstyle ':completion:*:manuals.*' insert-sections   true
zstyle ':completion:*:man:*'     menu yes no-select

# make ./configure completion simpler
zstyle ':completion:*:*:-command-:*' ignored-patterns './config.*'


lazycomplete() {
    local cmd="$1"
    local completer="$2"
    have $cmd || return

    eval "\
_lazycomplete_$cmd() {
    compdef -d $cmd
    unfunction _lazycomplete_$cmd
    eval \"_$cmd() {
        \$($completer)
    }\"
    compdef _$cmd $cmd
    _$cmd
}
"
    compdef _lazycomplete_$cmd $cmd
}
lazycomplete atuin "atuin gen-completions --shell zsh"
lazycomplete bat "bat --completion zsh"
lazycomplete cargo "rustup completions zsh cargo"
lazycomplete mise "mise completion zsh"
lazycomplete poetry "poetry completions zsh"
lazycomplete ruff "ruff generate-shell-completion zsh"
lazycomplete rustup "rustup completions zsh rustup"
lazycomplete uv "uv --generate-shell-completion zsh"
lazycomplete uvx "uvx --generate-shell-completion zsh"


# host completion
hosts=(
    ${${${${${(f)"$(<${HOME}/.ssh/known_hosts)"//\[/}//\]:/ }:#[\|]*}%%\ *}%%,*}
    ${(s: :)${${${(@M)${(f)"$(<${HOME}/.ssh/config)"}:#Host *}#Host }:#*[*?]*}}
    ${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}
    localhost
)
zstyle ':completion:*:hosts' hosts $hosts
zstyle ':completion:*:hosts' ignored-patterns 'ip6-*'

# http://unix.stackexchange.com/a/6340/17525
_sshrc() {
    local service=ssh
    _ssh "$@"
}
compdef _sshrc sshrc

zstyle ':completion:*:users' ignored-patterns avahi avahi-autoipd backup bin bitlbee \
    cl-builder colord daemon Debian-exim Debian-gdm festival fetchmail games gnats hplip \
    irc lastfm libuuid list lp mail man messagebus minbif mpd news nobody ntp polkituser \
    proxy saned spampd sshd statd sync sys timidity uml-net usbmux uucp www-data '_*'


# use generic completion for programs that support --help
compdef _gnu_generic tail head cp mv df uname

compdef '_files -g "*.(#l)(tar.bz2|tbz2|tbz|tar.gz|tgz|tar.xz|txz|tar.lzma|tar|rar|lha|lzh|7z|zip|jar|war|ear|xpi|deb|bz2|gz|Z|xz|lzma)"' unpack

compdef '_files -g "*.(pdf|ps|djv(|u))"' evince
compdef '_files -g "*.(pdf|ps|djv(|u))"' zathura

# menu selection: pick item but stay in the menu (press esc-return)
bindkey -M menuselect '\e^M' accept-and-infer-next-history
# bindkey -M menuselect '^\n'  accept-and-menu-complete # conflicts with '^J'
bindkey -M menuselect '\e[13;5u'  accept-and-menu-complete

bindkey -M menuselect '^j' down-line-or-search
bindkey -M menuselect '^k' up-line-or-search
bindkey -M menuselect '^l' forward-char
bindkey -M menuselect '^h' backward-char
bindkey -M menuselect '^d' forward-word
bindkey -M menuselect '^u' backward-word

# remove last inserted match
bindkey -M menuselect '^w' undo

# http://stackoverflow.com/a/844299/102250
# show dots while completion is working
expand-or-complete-with-dots() {
    echo -ne "\e[31m......\e[0m"
    zle expand-or-complete
    zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

# force file completion
zle -C complete-files complete-word _generic
zstyle ':completion:complete-files:*' completer _files
bindkey "^X^F" complete-files
# allow the key sequence to continue cycling in menu
bindkey -M menuselect "^X^F" complete-word

# Complete paths from tmux pane
# Originally based on https://gist.github.com/blueyed/6856354
_tmux_pane_paths() {
    if [[ -z "$TMUX_PANE" ]]; then
        _message "not running inside tmux!"
        return 1
    fi

    local expl
    local -U -a paths

    _tmux_capture_pane() {
        tmux capture-pane -J -p -S -100 |
            sed -n -r -e 's/.*(^|\s+)([a-zA-Z0-9/._~-]*\/[a-zA-Z0-9/._-]*).*/\2/gp'
    }

    paths=( ${(u)$(_tmux_capture_pane)} )
    _wanted values expl 'paths from current tmux pane' compadd -a paths
}
zle -C tmux-pane-paths-prefix   complete-word _generic
zle -C tmux-pane-paths-anywhere complete-word _generic
bindkey '^X^Pp' tmux-pane-paths-prefix
bindkey '^X^PP' tmux-pane-paths-anywhere
zstyle ':completion:tmux-pane-paths-(prefix|anywhere):*' completer _tmux_pane_paths
zstyle ':completion:tmux-pane-paths-(prefix|anywhere):*' ignore-line current
# Display the (interactive) menu on first execution of the hotkey.
zstyle ':completion:tmux-pane-paths-(prefix|anywhere):*' menu yes select
zstyle ':completion:tmux-pane-paths-anywhere:*' matcher-list 'b:=* m:{A-Za-z}={a-zA-Z}'

# modified from http://www.zsh.org/mla/users/2015/msg00081.html
# and http://www.zsh.org/mla/workers/2016/msg00659.html
zstyle ':completion:most-recent-file:*' file-sort modification
zstyle ':completion:most-recent-file:*' file-patterns '%p:all-files'
zstyle ':completion:most-recent-file:*' completer _files
zle -C most-recent-file menu-complete _generic
complete-most-recent-file () {
    [[ $LASTWIDGET != $WIDGET ]] && zle auto-suffix-retain
    zle most-recent-file -w
}
zle -N complete-most-recent-file
bindkey "^X^N" complete-most-recent-file


zle -C extpwds menu-complete _generic
bindkey "^X^T" extpwds
zstyle ':completion:extpwds::::' completer _extpwds

# The standard _tilde function with users removed
_tilde_no_users () {
    [[ -n "$compstate[quote]" ]] && return 1
    local expl suf ret=1
    if [[ "$SUFFIX" = */* ]]
    then
        ISUFFIX="/${SUFFIX#*/}$ISUFFIX"
        SUFFIX="${SUFFIX%%/*}"
        suf=(-S '')
    else
        suf=(-qS/)
    fi
    _tags named-directories directory-stack
    while _tags; do
        _requested named-directories expl 'named directory' compadd "$suf[@]" "$@" -k nameddirs && ret=0
        _requested directory-stack && _directory_stack "$suf[@]" && ret=0
        (( ret )) || return 0
    done
    return ret
}
compdef _tilde_no_users -tilde-

# vim: filetype=zsh
