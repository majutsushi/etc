#!/usr/bin/env bash
# Ideas:
# https://github.com/ranger/ranger/blob/master/ranger/data/scope.sh
# https://github.com/wofr06/lesspipe/blob/lesspipe/lesspipe.sh
#
# shellcheck disable=SC2310

set -eEu -o pipefail
shopt -s inherit_errexit
IFS=$'\n\t'
PS4='+\t '

[[ "${TRACE:-0}" == "1" ]] && set -x


has_cmd() {
    type -P "$1" > /dev/null
}

try() {
    if has_cmd "$1"; then
        "$@"
    else
        echo "No $1 available"
    fi
}

hl() {
    local bat=bat
    if has_cmd batcat; then
        bat=batcat
    fi
    $bat --color always --style changes "$@"
}

# Slightly modified from the bundled lesspipe
iso_list() {
    local opts=()
    isoinfo -d -i "$1"
    isoinfo -d -i "$1" | grep -q ^Rock\.Ridge && opts+=("-R")
    isoinfo -d -i "$1" | grep -q ^Joliet && opts+=("-J")
    echo
    isoinfo -f "${opts[@]}" -i "$1"
}

fontinfo() {
    if ! has_cmd otfinfo; then
        echo "No otfinfo available"
        return
    fi
    otfinfo --info "$1"
    echo
    fc-scan --format "Font format: %{fontformat}\n" "$1"
    echo
    echo "Features:"
    otfinfo --features "$1"
    echo
    echo "Tables:"
    otfinfo --tables "$1"
    echo
    echo "Scripts:"
    otfinfo --scripts "$1"
}


# If a ':' is appended, just display the original file
if [[ "$1" == *: ]]; then
    cat "${1%:}"
    exit 0
fi

FILE_PATH="$(readlink -f "$1")"
if ! [[ -r "$FILE_PATH" ]]; then
    exit 1
fi

# Use shared-mime-info database if possible
if has_cmd gio; then
    MIME_TYPE=$(gio info --attributes=standard::content-type "$FILE_PATH" | awk '/standard::content-type/ { print $2 }')
else
    MIME_TYPE=$(file --mime-type --dereference --brief "$FILE_PATH" 2> /dev/null)
fi

BASENAME="$(basename "$FILE_PATH")"
BASENAME_LOWER=$(echo "$BASENAME" | tr '[:upper:]' '[:lower:]')
PARENT_DIR="$(dirname "$FILE_PATH")"

case "$MIME_TYPE" in
    application/epub+zip)
        if has_cmd mdcat; then
            try pandoc -s -t markdown "$FILE_PATH" | mdcat
        else
            try pandoc -s -t plain "$FILE_PATH"
        fi
        ;;
    application/*java-archive | application/x-xpinstall | application/zip | application/*+zip)
        case "$BASENAME_LOWER" in
            *.egg)
                unzip -p "$FILE_PATH" EGG-INFO/PKG-INFO | \
                    sed '/^Description:/,/^\S/{/^Description:/d; /^\S/b; d}'
                echo
                unzip -v "$FILE_PATH"
                ;;
            *.xpi)
                unzip -p "$FILE_PATH" manifest.json | \
                    try jq --color-output '. | {name,version,description,author}'
                echo
                unzip -v "$FILE_PATH"
                ;;
            *)
                unzip -l "$FILE_PATH"
        esac ;;
    application/json | application/*+json)
        try jq --color-output . "$FILE_PATH" ;;
    application/msword)
        if has_cmd wvText; then wvText "$FILE_PATH" /dev/stdout
        elif has_cmd antiword; then antiword "$FILE_PATH"
        elif has_cmd catdoc; then catdoc "$FILE_PATH"
        else echo "No wvText, antiword or catdoc available"; fi ;;
    application/pdf)
        try pdftotext -layout -nopgbrk -q "$FILE_PATH" - ;;
    application/postscript)
        gs -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -sDEVICE=txtwrite -sOutputFile=- -q "$FILE_PATH" ;;
    application/vnd.debian.binary-package)
        echo "$FILE_PATH"; dpkg --info "$FILE_PATH"
        echo
        echo '*** Contents:'; dpkg-deb --contents "$FILE_PATH"
        ;;
    application/vnd.ms-cab-compressed)
        try lsar -l "$FILE_PATH" ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document)
        try docx2txt "$FILE_PATH" - ;;
    application/vnd.sqlite3)
        try sqlite3 "file:${FILE_PATH}?mode=ro" ".schema" -header -column ;;
    application/x-7z-compressed)
        try 7z l "$FILE_PATH" ;;
    application/x-arc)
        if has_cmd lsar; then lsar -l "$FILE_PATH"
        else try arc l "$FILE_PATH"; fi ;;
    application/x-archive)
        try ar tv "$FILE_PATH" ;;
    application/x-bittorrent)
        try transmission-show "$FILE_PATH" ;;
    application/vnd.efi.img)
        try fdisk -l --color=always "$FILE_PATH" ;;
    application/vnd.efi.iso | application/x-cd-image | application/x-iso9660-image)
        if has_cmd isoinfo; then iso_list "$FILE_PATH"
        else echo "No isoinfo available"; fi ;;
    application/x-executable | application/x-pie-executable | application/x-sharedlib)
        try readelf -WCa "${FILE_PATH}" ;;
    application/x-java | application/x-java-applet)
        if has_cmd procyon; then
            (
                cd "$PARENT_DIR" || return
                if is-dark-mode; then
                    JDK_JAVA_OPTIONS='-DAnsi=true' procyon "$BASENAME" 2>/dev/null
                else
                    JDK_JAVA_OPTIONS='-DAnsi=true' procyon --light "$BASENAME" 2>/dev/null
                fi
            )
        elif has_cmd javap; then
            hl -l java <(javap -sysinfo -private -constants "$FILE_PATH")
        fi
        ;;
    application/x-lha)
        try lha -l "$FILE_PATH" ;;
    application/x-msi)
        try lsar -l "$FILE_PATH" ;;
    application/x-rar | application/vnd.rar | application/vnd.comicbook-rar)
        try unrar l "$FILE_PATH" ;;
    application/x-troff-man)
        MAN_KEEP_FORMATTING=1 man --local-file "$FILE_PATH" ;;
    application/x-xz-compressed-tar)
        tar tvf "$FILE_PATH" --force-local ;;
    application/x-zoo)
        try lsar -l "$FILE_PATH" ;;
    audio/*)
        try mediainfo "$FILE_PATH" ;;
    font/otf | font/ttf | font/sfnt | application/vnd.ms-opentype)
        fontinfo "$FILE_PATH" ;;
    image/*)
        if has_cmd exiftool; then exiftool "$FILE_PATH"
        else try mediainfo "$FILE_PATH"; fi ;;
    message/rfc822)
        try mu view "$FILE_PATH" ;;
    text/csv)
        try csvlook "$FILE_PATH" ;;
    text/html)
        if has_cmd w3m; then w3m -dump "$FILE_PATH"
        elif has_cmd lynx; then lynx -dump -- "$FILE_PATH"
        elif has_cmd elinks; then elinks -dump "$FILE_PATH"
        else echo "No w3m, lynx, or elinks available"; fi ;;
    text/rtf)
        try unrtf --text "$FILE_PATH" ;;
    text/x-patch | text/x-diff)
        if has_cmd diffstat; then
            diffstat -C "$FILE_PATH"
            echo
        fi
        hl "$FILE_PATH"
        ;;
    video/*)
        try mediainfo "$FILE_PATH" ;;
    *)
        case "$BASENAME_LOWER" in
            *.crt | *.pem)
                try openssl x509 -hash -text -noout -in "$FILE_PATH" ;;
            *.crl)
                try openssl crl -hash -text -noout -in "$FILE_PATH" ;;
            *.csr)
                try openssl req -text -noout -in "$FILE_PATH" ;;
            *.md | *.markdown)
                try mdcat "$FILE_PATH" ;;
            *.pcap | *.pcapng | *.pcap.* | *.pcapng.*)
                try tshark -t a -r "$FILE_PATH" ;;
            *.tar | *.tar.* | *.tgz)
                tar tvf "$FILE_PATH" --force-local ;;
            # These need to come after the tar matches
            *.gz | *.z | *.dz)
                gzip -dc "$FILE_PATH" ;;
            *.xz)
                try xz -dc "$FILE_PATH" ;;
            *)
                MIME_ENC=$(file --mime-encoding --dereference --brief "$FILE_PATH")
                if [[ "$MIME_ENC" != binary ]]; then
                    hl "$FILE_PATH"
                else
                    xfile "$FILE_PATH"
                fi
        esac
esac
