#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11
#
# Future ideas:
# https://github.com/blueyed/dotfiles/blob/9f2c882fb8e9844d013fa9af6d7f04b122badd26/vimrc#L1525
# https://github.com/blueyed/dotfiles/blob/master/usr/bin/sh-setup-x-theme
# https://github.com/blueyed/dotfiles/blob/master/usr/bin/get-daytime-period

import argparse
import logging
import os
import platform
import re
import signal
import sys
import textwrap
from pathlib import Path
from subprocess import CalledProcessError, check_output, run

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)


XDG_CONFIG_HOME = Path(os.environ["XDG_CONFIG_HOME"])
XDG_STATE_HOME = Path(os.environ["XDG_STATE_HOME"])


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Switch between dark and light themes")
    parser.add_argument("mode", choices=["dark", "light"])
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> int:
    if args.verbose:
        log.setLevel(logging.DEBUG)

    is_dark = args.mode == "dark"

    handle_timestamp(is_dark)
    handle_alacritty(is_dark)
    handle_kitty(is_dark)
    handle_neovim(is_dark)
    handle_delta(is_dark)
    handle_sway(is_dark)

    if platform.system() == "Linux":
        handle_awesome(is_dark)
        handle_gnome(is_dark)
        handle_xsettings(is_dark)

    return 0


def handle_timestamp(_is_dark: bool) -> None:
    file = XDG_STATE_HOME / "toggledark"
    file.touch()


def handle_awesome(is_dark: bool) -> None:
    if os.environ.get("XDG_CURRENT_DESKTOP", "") != "awesome":
        return

    run(
        ["awesome-client"],
        input=f'awesome.emit_signal("toggle_dark", {"true" if is_dark else "false"})',
        check=True,
        text=True,
    )


def handle_alacritty(is_dark: bool) -> None:
    light_theme = "material"
    dark_theme = "desert"

    theme_file = XDG_CONFIG_HOME / "alacritty/theme.toml"
    theme = dark_theme if is_dark else light_theme

    settings = textwrap.dedent(
        f"""
    import = ["{XDG_CONFIG_HOME / f"alacritty/{theme}-theme.toml"!s}"]
    """
    ).lstrip()
    theme_file.write_text(settings)


def handle_kitty(is_dark: bool) -> None:
    theme = "theme-desert.conf" if is_dark else "theme-material.conf"
    link_path = XDG_CONFIG_HOME / "kitty" / "current-theme.conf"
    if link_path.exists():
        link_path.unlink()
    link_path.symlink_to(XDG_CONFIG_HOME / "kitty" / theme)

    try:
        run(["pkill", "-USR1", "kitty"], check=True, timeout=10)
    except CalledProcessError:
        return


def handle_neovim(is_dark: bool) -> None:
    servers = (
        check_output(["nvr", "--serverlist"]).decode(sys.stdout.encoding).splitlines()
    )
    for server in servers:
        run(
            [
                "nvr",
                "--servername",
                server,
                "-c",
                f"SetColorscheme {'dark' if is_dark else 'light'}",
            ],
            check=True,
            timeout=10,
        )


def handle_xsettings(is_dark: bool) -> None:
    light_theme = "Adwaita"
    dark_theme = "Adwaita-dark"

    xsettingsd_conf = XDG_CONFIG_HOME / "xsettingsd"

    try:
        pid = int(check_output(["pidof", "-s", "xsettingsd"]))
    except CalledProcessError:
        return

    settings = xsettingsd_conf.read_text()
    settings = re.sub(
        r'^Net/ThemeName "[^"]+"$',
        f'Net/ThemeName "{dark_theme if is_dark else light_theme}"',
        settings,
        flags=re.MULTILINE,
    )
    xsettingsd_conf.write_text(settings)

    os.kill(pid, signal.SIGHUP)


def handle_gnome(is_dark: bool) -> None:
    color_scheme = "prefer-dark" if is_dark else "default"
    set_gsettings("color-scheme", color_scheme)
    gtk_theme = "Adwaita-dark" if is_dark else "Adwaita"
    set_gsettings("gtk-theme", gtk_theme)
    cursor_theme = "Bibata-Modern-Ice" if is_dark else "Bibata-Modern-Classic"
    set_gsettings("cursor-theme", cursor_theme)


def handle_delta(is_dark: bool) -> None:
    config_path = Path.home() / ".local/etc/gitconfig"
    config_path.parent.mkdir(parents=True, exist_ok=True)
    key = "delta.syntax-theme"
    theme = "Monokai Extended" if is_dark else "Monokai Extended Light"
    run(["git", "config", "--file", str(config_path), key, theme], check=True)


def handle_sway(is_dark: bool) -> None:
    if os.environ.get("XDG_CURRENT_DESKTOP", "") != "sway":
        return

    script_path = XDG_CONFIG_HOME / "sway/toggle-dark.py"
    run([script_path, "dark" if is_dark else "light"], check=True)


def set_gsettings(setting: str, value: str) -> None:
    run(
        [
            "gsettings",
            "set",
            "org.gnome.desktop.interface",
            setting,
            value,
        ],
        check=True,
    )


if __name__ == "__main__":
    sys.exit(main(parse_args()))
