priority -20

global !p
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]
def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]
endglobal


# Standard structures

snippet if "if" b
if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet elif "else if"
else if ($1) {
	$0
}
endsnippet

snippet /el(se)?/ "else" r
else {
	$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2) {
	${3:${VISUAL}}
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++) {
	${3:${VISUAL}}
}
endsnippet

snippet for "for" b
for ($1; $2; $3) {
	${4:${VISUAL}}
}
endsnippet

snippet wh "while" b
while ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet try "try .. catch" b
try {
	${1:${VISUAL}}
} catch (${2:Exception} ${3:e}) {
	${4:e.printStackTrace();}
}
endsnippet

snippet ca "catch"
catch (${1:Exception} ${2:e}) {
	$0
}
endsnippet

snippet sw "switch" b
switch ($1) {
	case $2: $0
}
endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet /m(eth)?/ "method" br
${1:private} ${2:void} ${3:method}(${4}) ${5:throws $6 }{
	${7:${VISUAL}}
}
endsnippet

snippet /m(eth)?d/ "method with javadoc" br
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n" + snip.mkline(" * @param " + i[1] + " usage...", indent=snip.indent)`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n" + snip.mkline(" * @throws " + t[6], indent=snip.indent)
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n" + snip.mkline(" * @return " + t[2], indent=snip.indent)
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws ${6} }{
	${8:${VISUAL}}
}
endsnippet

snippet class "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` ${1:extends ${2:Parent} }${3:implements ${4:Interface} }{
`!p
args = getArgs(t[5])
snip >> 1
for i in args:
	snip += "private " + i[0] + " " + i[1]+ ";"
snip << 1
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($5) {`!p
args = getArgs(t[5])
snip >> 2
for i in args:
	snip += "this." + i[1] + " = " + i[1] + ";"
snip << 2
if len(args) == 0:
	snip.rv += "\n"`
	}

	$0
}
endsnippet


# Special cases

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet main "method (main)" b
public static void main(String[] args) {
	$0
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv = snip.mkline("\n", indent="")`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e) {
	${2:e.printStackTrace();}
}
endsnippet

# vim: ts=4 sw=4
