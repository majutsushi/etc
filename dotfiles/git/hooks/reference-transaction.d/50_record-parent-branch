#!/bin/bash
# Record the branch that a new branch was created from
# as branch.<new branch>.parent

set -eEu -o pipefail
IFS=$'\n\t'
PS4="$BASH_SOURCE:"'+\t '

error_handler() { echo "Error: Line ${1} exited with status ${2}"; }
trap 'error_handler ${LINENO} $?' ERR

[[ "${TRACE:-0}" == "1" ]] && set -x


if [[ "$1" != "committed" ]]; then
    exit
fi

while read -r LINE; do
    [[ -z "$LINE" ]] && continue
    IFS=' ' read -r -a ARRAY <<< "$LINE"

    OLD_REF="${ARRAY[0]}"
    NEW_REF="${ARRAY[1]}"
    REF_NAME="${ARRAY[2]}"

    # We're only interested in local, proper branches
    if ! [[ "$REF_NAME" =~ refs/heads/* ]]; then
        continue
    fi

    # We're only interested in new branches, which have an all-zeroes old ref
    if [[ "$OLD_REF" != "0000000000000000000000000000000000000000" ]]; then
        continue
    fi

    # If the new ref is all zeroes then it is getting deleted
    if [[ "$NEW_REF" == "0000000000000000000000000000000000000000" ]]; then
        continue
    fi

    NEW_BRANCH=${REF_NAME##*/}
    OLD_BRANCH=$(git symbolic-ref --short -q HEAD) || true

    if [[ -z "$OLD_BRANCH" ]] || [[ "$OLD_BRANCH" == "$NEW_BRANCH" ]]; then
        continue
    fi

    git config branch."${NEW_BRANCH}".parent "$OLD_BRANCH"
done
