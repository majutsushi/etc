set nocompatible

if exists(":filetype")
    filetype plugin indent on
endif

if has("syntax")
    syntax on
endif

set autoread
set backspace=indent,eol,start
set completeopt=longest,menuone
set confirm
set cursorline
set display=lastline
set hlsearch
set hidden
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:._,trail:.,nbsp:x,precedes:<,extends:>
set more
set nrformats-=octal
" set number
set ruler
set smartcase
set scrolloff=5
set shortmess=aoOtI
set showcmd
set showmode
set sidescrolloff=5
set virtualedit=all
set wrap

set formatoptions+=r " continue comments when pressing <Enter>
set formatoptions-=o " don't continue comments when pressing o/O
set formatoptions+=n " recognize numbered lists when formatting
set formatoptions+=2 " use indent of second line in paragraph
set formatoptions+=l " don't break long lines that were already too long
set formatoptions+=j " Delete comment character when joining commented lines

set tabstop=8
set shiftwidth=4
set smarttab
set expandtab
set autoindent

set timeout
set nottimeout
set timeoutlen=1000
set ttimeoutlen=10

set wildmode=list:longest,full
set wildignorecase

runtime! macros/matchit.vim

highlight Search ctermbg=3 ctermfg=0
highlight Visual NONE
highlight Visual term=reverse cterm=reverse

" This prevents errors if Vim was compiled without +eval,
" see :h no-eval-feature
if 1
    function! s:osc52_yank() abort
        " Don't copy text from delete events
        if v:event.operator == "d"
            return
        endif

        let text = join(v:event.regcontents, "\n")
        let encoded = system("base64", text)
        if v:shell_error
            echoerr encoded
        else
            let encoded = substitute(encoded, "\n", "", "g")
            let osc_seq = "\x1b]52;c;" . encoded . "\x07"
            call writefile([osc_seq], "/dev/fd/2", "b")
        endif
    endfunction
    autocmd TextYankPost * call s:osc52_yank()

    " search for visually selected text
    " http://vimcasts.org/episodes/search-for-the-selected-text/
    function! s:VSetSearch(cmdtype)
        let temp = @s
        normal! gv"sy
        let @/ = '\V' . substitute(escape(@s, a:cmdtype . '\'), '\n', '\\n', 'g')
        let @s = temp
    endfunction

    xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
    xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
endif

nnoremap <silent> <C-l> :nohlsearch<CR><C-l>
nnoremap <silent> g/ :execute 'vimgrep /' . @/ . '/g %'<CR>:copen<CR>
nnoremap Y y$
