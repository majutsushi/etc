[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # mccabe
  "C90",
  # isort
  "I",
  # pep8-naming
  "N",
  # pyupgrade
  "UP",
  # flake8-2020
  "YTT",
  # flake8-bandit
  "S",
  # flake8-blind-except
  "BLE",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-comprehensions
  "C4",
  # flake8-datetimez
  "DTZ",
  # flake8-executable
  "EXE",
  # flake8-future-annotations
  "FA",
  # flake8-implicit-str-concat
  "ISC",
  # flake8-import-conventions
  "ICN",
  # flake8-logging-format
  "G",
  # flake8-no-pep420
  "INP",
  # flake8-pie
  "PIE",
  # flake8-pytest-style
  "PT",
  # flake8-return
  "RET",
  # flake8-self
  "SLF",
  # flake8-simplify
  "SIM",
  # flake8-type-checking
  "TC",
  # flake8-unused-arguments
  "ARG",
  # flake8-use-pathlib
  "PTH",
  # flake8-todos
  "TD",
  # eradicate
  # Disabled because of too many false positives
  # "ERA",
  # pygrep-hooks
  "PGH",
  # pylint
  "PLE", "PLR", "PLW",
  # tryceratops
  "TRY",
  # flynt
  "FLY",
  # Perflint
  "PERF",
  # refurb
  "FURB",
  # Ruff-specific rules
  "RUF",
]

ignore = [
  # builtin-attribute-shadowing: Class attribute {name} is shadowing a python builtin
  # Attributes don't actually shadow anything
  "A003",
  # shebang-missing-python
  # Disabled because of https://github.com/astral-sh/ruff/issues/13021
  "EXE003",
  # error-suffix-on-exception-name
  "N818",
  # raise-vanilla-args: Avoid specifying long messages outside the exception class
  "TRY003",
  # try-consider-else: Consider moving this statement to an else block
  "TRY300",
  # Disable some rules that conflict with the formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "W191", "E111", "E114", "E117", "E501", "D206", "D300", "Q000", "Q001", "Q002", "Q003", "COM812", "COM819", "ISC001", "ISC002"
]

unfixable = [
  # unused-variable: Local variable {name} is assigned to but never used
  # This can be undesirable if the file is saved before adding the code that
  # uses a variable.
  "F841",
]

# Enable `from __future__ import annotations` imports
future-annotations = true
