#!/usr/bin/env python3
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11
#
# Future ideas:
# https://github.com/blueyed/dotfiles/blob/9f2c882fb8e9844d013fa9af6d7f04b122badd26/vimrc#L1525
# https://github.com/blueyed/dotfiles/blob/master/usr/bin/sh-setup-x-theme
# https://github.com/blueyed/dotfiles/blob/master/usr/bin/get-daytime-period

import argparse
import logging
import os
import re
import signal
import sys
import textwrap
from pathlib import Path
from subprocess import CalledProcessError, check_output, run

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Switch between dark and light themes")
    parser.add_argument("mode", choices=["dark", "light"])
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> int:
    if args.verbose:
        log.setLevel(logging.DEBUG)

    is_dark = args.mode == "dark"

    handle_alacritty(is_dark)
    handle_vim(is_dark)
    handle_xsettings(is_dark)
    handle_gnome(is_dark)

    return 0


def handle_alacritty(is_dark: bool) -> None:
    light_theme = "material"
    dark_theme = "desert"

    theme_file = Path(os.environ["XDG_CONFIG_HOME"]) / "alacritty/theme.yaml"
    theme = dark_theme if is_dark else light_theme

    settings = textwrap.dedent(
        f"""
    import:
        - {str(Path.home() / f".etc/alacritty/{theme}-theme.yaml")}
    """
    ).lstrip()
    theme_file.write_text(settings)


def handle_vim(is_dark: bool) -> None:
    light_theme = "vim-material"
    dark_theme = "desert"

    scheme_file = Path.home() / ".local/etc/vim/colorscheme.txt"
    if not scheme_file.parent.exists():
        scheme_file.parent.mkdir()

    scheme_file.write_text(dark_theme if is_dark else light_theme)


def handle_xsettings(is_dark: bool) -> None:
    light_theme = "Adwaita"
    dark_theme = "Adwaita-dark"

    xsettingsd_conf = Path(os.environ["XDG_CONFIG_HOME"]) / "xsettingsd"

    try:
        pid = int(check_output(["pidof", "-s", "xsettingsd"]))
    except CalledProcessError:
        return

    settings = xsettingsd_conf.read_text()
    settings = re.sub(
        r'^Net/ThemeName "[^"]+"$',
        f'Net/ThemeName "{dark_theme if is_dark else light_theme}"',
        settings,
        flags=re.MULTILINE,
    )
    xsettingsd_conf.write_text(settings)

    os.kill(pid, signal.SIGHUP)


def handle_gnome(is_dark: bool) -> None:
    scheme = "prefer-dark" if is_dark else "default"
    run(
        [
            "gsettings",
            "set",
            "org.gnome.desktop.interface",
            "color-scheme",
            scheme,
        ],
        check=True,
    )


if __name__ == "__main__":
    sys.exit(main(parse_args()))
