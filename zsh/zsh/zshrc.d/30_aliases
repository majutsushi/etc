# reload functions
freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }
compdef _functions freload

# zsh profiling
profile () {
    ZSH_PROFILE_RC=1 $SHELL "$@"
}

# edit alias via zle:
edalias() {
    [[ -z "$1" ]] && { echo "Usage: edalias <alias_to_edit>" ; return 1 } || vared aliases'[$1]' ;
}
compdef _aliases edalias

# edit function via zle:
edfunc() {
    [[ -z "$1" ]] && { echo "Usage: edfunc <function_to_edit>" ; return 1 } || zed -f "$1" ;
}
compdef _functions edfunc


typeset -a _ls_opts; _ls_opts=(-F -N)
if [[ "$TERM" != "dumb" ]]; then
    _ls_opts+="--color=auto"
fi
if command ls --group-directories-first >/dev/null 2>&1; then
    _ls_opts+=--group-directories-first
fi
if ismac; then
    _ls_opts+="-G"
fi
alias ls="LC_COLLATE=POSIX ls $_ls_opts"
alias ll="ls -l"
alias l="ls -lA"

# list recent files, based on
# http://www.zsh.org/mla/users/2014/msg00326.html
lr() {
    (){
        l -r --sort=time "${(u)@}"
    } **/*(N.mh-${1:-1}) **/*(N.Om[-${2:-10},-1])
}

if is_root; then
    INTERACTIVE="-i"
fi
if islinux; then
    alias cp="nocorrect cp --preserve=timestamps $INTERACTIVE"
    alias rm="nocorrect rm --one-file-system $INTERACTIVE"
else
    alias cp="nocorrect cp $INTERACTIVE"
    alias rm="nocorrect rm $INTERACTIVE"
fi
alias mv="nocorrect mv $INTERACTIVE"
alias mkdir="nocorrect mkdir"

mcd() { mkdir -p "$@"; cd "$@" }
compdef _mkdir mcd

# defaults for some programs
alias ffmpeg="ffmpeg -hide_banner"
alias ffprobe="ffprobe -hide_banner"
alias grep="pager-wrapper grep --color=auto"
alias gdb="gdb -q"
alias less="less -F"
alias mocp="padsp -M mocp --moc-dir $HOME/.etc/moc --sound-driver OSS"
alias mtr="mtr -t"
alias ssh="ssh -o 'PermitLocalCommand yes'"
alias ts="ts '%Y-%m-%dT%H:%M:%.S%z'"

# execute last command as root
alias fu='sudo $(fc -ln -1) '

if have exa; then
    typeset -a _exa_args
    _exa_args=(--group-directories-first --git --classify)
    alias t="exa $_exa_args --tree -l"
    alias e="exa $_exa_args -la"
    alias ee="exa $_exa_args -l"
    alias ls="exa $_exa_args"
    alias ll=ee
    alias l=e
    unset _exa_args
else
    alias t='tree --dirsfirst -F'
fi

alias da='du -sch'
alias decolor='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'
alias g="grep --color=always --extended-regexp"
alias jo='jobs -l'
alias jsonpp='python -mjson.tool'
alias le='/usr/share/vim/vimcurrent/macros/less.sh'
alias myip='curl http://v4.ipv6-test.com/api/myip.php'
alias pa='ps aux | less'
alias pu='ps ux | less'
alias rr='ranger'
alias rot13='tr a-zA-Z n-za-mN-ZA-M'
alias ta='noglob task'
alias vi='vim'
alias wr='wget --recursive --level=inf --convert-links --page-requisites --no-parent'
alias x='extract'

vimlint() {
    local bundles="$HOME/.var/lib/vim/bundles"
    "$bundles"/vim-vimlint/bin/vimlint.sh -l "$bundles"/vim-vimlint -p "$bundles"/vim-vimlparser "$@"
}

rs() {
    rsync -avxEHA --delete --delete-excluded --human-readable --progress "$@"
}

alias a='~/.etc/zsh/sack ag --smart-case'
f() {
    local shortcut="$(sed -n "$1p" < "$SACK_SHORTCUT_FILE" | awk '
        {
            print $1
            file = $2
            for (i = 3; i <= NF; i++) {
                file = file " " $i
            }
            print file
        }
    ')"
    shortcut=(${(f)shortcut})
    local file="${shortcut[2]:a}"
    local cmd="$EDITOR +${shortcut[1]} \"$file\""
    # save the actual command in the history
    print -sr -- ${cmd%%$'\n'}
    eval $cmd
}

# diff
local _diff_opts="-Nurd --exclude-from=$HOME/.etc/excludes/diff"
if have colordiff; then
    alias diff="colordiff $_diff_opts"
else
    alias diff="diff $_diff_opts"
fi
wdiff() { command wdiff --start-insert=${fg[green]} --end-insert=${reset_color} --start-delete=${fg[red]} --end-delete=${reset_color} "$@" }
alias diffstat="decolor | diffstat -C"

echoerr()  { echo "$@" 1>&2 }
quotify()  { local r="$(sed -e 's/'\''/'\'\\\\\'\''/g')" && echo "'"$r"'" }
bk()       { cp -r -b ${1} ${1}_$(date --iso-8601=m) }
sshot()    { scrot '%Y-%m-%d-%H%M%S_$wx$h.png' -e 'mv $f ~/media/desktop/screenshots/' "$@" }
wp()       { dig +short txt ${1// /_}.wp.dg.cx }
getlinks() { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }
flip()     { perl -C3 -Mutf8 -lpe '$_=reverse;y/a-zA-Z.['\'',({?!\"<_;‿⁅∴\r/ɐqɔpǝɟƃɥıɾʞ|ɯuodbɹsʇnʌʍxʎzɐqɔpǝɟƃɥıɾʞ|ɯuodbɹsʇnʌʍxʎz˙],'\'')}¿¡,>‾؛⁀⁆∵\n/' <<< "$1" }
hl()       { egrep --color=always -e '' -e${^*} }
xc()       { perl -pe "chomp if eof" | clipboard-copy }
copy-path() { readlink -f "$1" | xc }

anytoany() { print $(( [##$2] $1#$3 )) }
dectohex() { anytoany 10 16 $1 }
hextodec() { anytoany 16 10 $1 }

pager-wrapper () {
    if [[ -t 1 ]]; then
        "$@" | less -+c -FRX
    else
        "$@"
    fi
}

set_terminal_title() {
    if [[ "$TERM" == (xterm*|rxvt*|alacritty|screen*|tmux*) ]]; then
        printf "\e]0;%s\e\\" ${(V)argv}
    fi
}

cd() {
    if (( $# == 2 )); then
        local src="$1" rep="$2" dir
        integer n=1
        while true; do
            dir="${(I:${n}:)PWD/$src/$rep}"
            if [[ "$dir" = $PWD ]]; then
                print -r "$0: no replacements found: $PWD / \"$src\" / \"$rep\"" >&2
                return 1
            fi
            if [[ -d "$dir" ]]; then
                builtin cd -- "$dir"
                return
            fi
            (( n++ ))
        done
    else
        builtin cd "$@"
    fi
}

man() {
    if (( $#argv == 1 )); then
        set_terminal_title "man($1)"
    elif (( $#argv == 2 )); then
        set_terminal_title "man($2($1))"
    fi

    command man "$@"
}

tmux() {
    # create a cache directory for status script updates
    TMUX_CACHE="$XDG_RUNTIME_DIR"/tmux-cache
    mkdir -p "$TMUX_CACHE/status" "$TMUX_CACHE/.last"

    command tmux -f ~/.etc/tmux/tmux.conf "$@"
}

tmux-echo() {
    if [[ -n "$TMUX" ]]; then
        echo -e "\ePtmux;${1//\\e/\\e\\e}\e\\"
    else
        echo -e "$1"
    fi
}

# easily reattach tmux sessions
# http://blog.plenz.com/2012-01/tmux-session-names.html
tm() {
    [[ -z "$1" ]] && { tmux attach; return 0 }
    tmux has -t $1 && tmux attach -t $1 || tmux new -s $1
}
__tmux-sessions() {
    local -a sessions
    sessions=( ${${(f)"$(command tmux list-sessions 2>&-)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
}
compdef __tmux-sessions tm

# based on https://gist.github.com/namuol/9122237
__get_pids() {
    typeset -a args
    args=("${(z)@}")
    args=(${(@)args##\-*}) # remove 'kill' options
    print ${args}
}
__kill() {
    local -a names=(${(z)2})
    if command kill "${(z)1}"; then
        echo
        for name in $names; do
            echo " (╯°□°）╯︵$(flip "$name")"
        done
        echo
    else
        return $?
    fi
}
kill() {
    local args="$@"
    local -a pids=($(__get_pids "$args"))
    [[ -z "$pids" ]] && echo "No PIDs found" >&2 && return 1
    local -a names=($(ps --no-headers --format comm ${(z)pids}))
    __kill "$args" "$names"
}

jkill() {
    local args="$@"
    local pids=($(__get_pids "$args"))
    local pattern="${(j:|:)pids}"
    local names="$(jps | command grep --extended-regexp '\b'$pattern'\b' | cut -d' ' -f 2)"
    names=${names//$'\n'/ }
    __kill "$args" $names
}
_jkill() {
    local -a processes
    processes=( ${${(f)"$(command jps -l)"}/ /:} )
    _describe -t processes 'Java processes' processes "$@"
}
compdef _jkill jkill

alias ls_colors='echo $LS_COLORS | tr : '\''\n'\'' | sed '\''s/\(.*\)=\(.*\)/\x1b[\2m\1\t\2\x1b[0m/'\'''

# Function Usage: doc packagename
doc() { cd /usr/share/doc/$1 && ll }
_doc() { _files -W /usr/share/doc -/ }
compdef _doc doc

# conversions
alias i2u='iconv --from-code=ISO-8859-15 --to-code=UTF-8'
alias u2i='iconv --from-code=UTF-8 --to-code=ISO-8859-15'

# switch terminal encoding (rxvt-unicode only)
alias eucjp="printf '\33]701;%s\007' ja_JP.EUC-JP; export LANG=ja_JP.EUC-JP"
alias utf8="printf '\33]701;%s\007' en_US.UTF-8; export LANG=en_US.UTF-8"

# grep for running process, like: 'psgrep vim'
psgrep() {
    if [[ -z "$1" ]] ; then
        echo "psgrep - grep for process(es) by keyword" >&2
        echo "Usage: psgrep <keyword>" >&2 ; return 1
    else
        ps xauwww | head -n1
        ps xauwww | grep -v "grep.*$1" | grep $1 --color=always
    fi
}

upload() {
    if [[ -z "$1" ]]; then
        echo "usage: upload file1 file2 ..."
        return 1
    else
        chmod a+r "$@"
        scp -p "$@" root@majutsushi.net:/var/www/html/stuff/
    fi
    for i in "$@"; do
        echo "https://majutsushi.net/stuff/${i// /%20}"
    done
}

vim-profile-script() {
    if [[ "$#" != 2 ]]; then
        echo "usage: vim-profile-script <scriptpattern> <file to load>"
        return 1
    fi

    vim --cmd 'profile start profile.log' --cmd 'profile! file '$1'' "$2"
}
vim-profile-startup() {
    vim --cmd 'profile start vim-startup-profile.log' \
        --cmd 'profile func *' \
        --cmd 'profile file *' \
        -c 'qa' "$@"
}
vim-tagbar-debug() {
    vim --cmd 'let g:disable_tagbar_stl = 1' -c 'TagbarDebug' "$@"
}

pdfembedfonts() {
    if [[ $# != 1 ]]; then
        echo "Usage: $0 input.pdf"
        return 1
    else
        tmpname=$(mktemp)
        gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dNOPLATFONTS -dPDFSETTINGS=/prepress -sOutputFile=$tmpname $1
        mv $tmpname $1
    fi
}

# zsh with perl-regex - use it e.g. via:
# regcheck '\s\d\.\d{3}\.\d{3} Euro' ' 1.000.000 Euro'
regcheck() {
    zmodload zsh/pcre
    pcre_compile $1 && \
    pcre_match $2 && echo "regex matches" || echo "regex does not match"
}

# find out which libs define a symbol
# usage example: 'lcheck strcpy'
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1" | grep "$1"
    else
        echo "Usage: lcheck <function>" >&2
    fi
}

# display system state
status() {
    print ""
    print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")""
    print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
    print "Term..: $TTY ($TERM), $BAUD bauds, $COLUMNS x $LINES chars"
    print "Login.: $LOGNAME (UID = $EUID) on $HOST"
    print "System: $(cat /etc/[A-Za-z]*[_-][rv]e[lr]*)"
    print "Uptime:$(uptime)"
    print ""
}

# debian stuff
if [[ -r /etc/debian_version ]] ; then
    alias acs='apt-cache search'
    alias aps='aptitude search -F "%c%a%M%S %p %I %Z %v %V"'
    alias acsh='apt-cache show'
    alias acp='apt-cache policy'
    alias afs='apt-file search'
    alias api="$SUDO aptitude install"
    alias dbp='dpkg-buildpackage'
    alias muttbts='bts --mailreader="mutt -f %s" --mbox show'
    alias aptitude-just-recommended='aptitude -o "Aptitude::Pkg-Display-Limit=!?reverse-depends(~i) ~M !?essential"'
    alias aptitude-also-via-dependency='aptitude -o "Aptitude::Pkg-Display-Limit=~i !~M ?reverse-depends(~i) !?essential"'

    # use "dchange <package-name>" to view Debian's changelog of the package:
    dchange() {
        if [[ -r /usr/share/doc/${1}/changelog.Debian.gz ]] ; then
            less /usr/share/doc/${1}/changelog.Debian.gz
        else
            if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
                less /usr/share/doc/${1}/changelog.gz
            else
                echo "No changelog for package $1 found, sorry."
                return 1
            fi
        fi
    }
    _dchange() { _files -W /usr/share/doc -/ }
    compdef _dchange dchange

    # use "uchange <package-name>" to view upstream's changelog of the package:
    uchange() {
        if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
            less /usr/share/doc/${1}/changelog.gz
        else
            echo "No changelog for package $1 found, sorry."
            return 1
        fi
    }
    _uchange() { _files -W /usr/share/doc -/ }
    compdef _uchange uchange
fi

# vim: filetype=zsh
