# Configuration for Alacritty, the GPU enhanced terminal emulator.

window:
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 15
    y: 15

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  decorations: none

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 1000

# Font configuration (changes require restart)
font:
  # Point size
  size: 11.0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

mouse:
  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  enabled:
   - regex: "(mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
             [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     command: xdg-open
     post_processing: true
     mouse:
       enabled: true
       mods: None
     binding:
       key: U
       mods: Control|Alt

key_bindings:
  # Map private escape sequences so vim can remap them
  # https://en.wikipedia.org/wiki/C0_and_C1_control_codes
  # https://en.wikipedia.org/wiki/ANSI_escape_code
  - { key: Return,   mods: Shift,   chars: "\x1bQ13;2~"                      }
  - { key: Return,   mods: Alt,     chars: "\x1bQ13;3~"                      }
  - { key: Return,   mods: Control, chars: "\x1bQ13;5~"                      }
  - { key: Space,    mods: Shift,   chars: "\x1bQ32;2~"                      }
  - { key: Space,    mods: Alt,     chars: "\x1bQ32;3~"                      }
  - { key: Space,    mods: Control, chars: "\x1bQ32;5~"                      }
