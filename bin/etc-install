#!/bin/bash
#
# https://wiki.archlinux.org/index.php/XDG_Base_Directory
# https://github.com/grawity/dotfiles/blob/master/.dotfiles.notes

set -eEu -o pipefail
IFS=$'\n\t'

error_handler() { echo "Error: Line ${1} exited with status ${2}"; }
trap 'error_handler ${LINENO} $?' ERR


OSNAME=$(uname -s)
HOST=${HOST:-$(hostname)}
HOST=${HOST/.*}
DOMAIN=${DOMAIN:-$(hostname -d 2>&-)}
if [[ "$DOMAIN" == "" || "$DOMAIN" == "localdomain" || "$DOMAIN" == "(none)" ]]; then
    DOMAIN=$(grep "^domain " /etc/resolv.conf | cut -d' ' -f2 || echo "")
fi
export OSNAME HOST DOMAIN


info() {
    # echo -e "\033[32m$1\033[0m"
    echo -e "$1"
}
warn() {
    echo -e "\033[33m$1\033[0m"
}
error() {
    echo -e "\033[31m$1\033[0m"
}

merge() {
    local confbase=.etc/$1
    shift

    if [[ $# -ge 1 ]]; then
        local "$@"
    fi
    local target=${target:-.$(basename "$confbase")}
    local comment=${comment:-#}

    info "Merging $target"

    if [[ -f $target ]] && ! head -1 "$target" | grep -q "\*\*\* GENERATED FILE - DO NOT EDIT \*\*\*"; then
        error "$target is not a generated file!"
        return
    fi

    rm -f "$target"

    echo "$comment *** GENERATED FILE - DO NOT EDIT ***" > "$target"
    if [[ -f ${confbase} ]]; then
        echo "$comment [$(readlink -f "$confbase")]" >> "$target"
        cat "$confbase" >> "$target"
    fi

    local localbase localtarget
    localbase=$HOME/.local/etc/$(basename "$confbase")
    localtarget="$(mktemp -u)"
    if [[ -f "$localbase" ]]; then
        echo -e "\n$comment [$(readlink -f "$localbase")]" >> "$localtarget"
        cat "$localbase" >> "$localtarget"
    fi
    if [[ -d "${localbase}.d" ]]; then
        for part in "${localbase}.d"/??_*; do
            echo -e "\n$comment [$(readlink -f "$part")]" >> "$localtarget"
            cat "$part" >> "$localtarget"
        done
    fi

    if [[ -d ${confbase}.d ]]; then
        if [[ -f "$localtarget" ]]; then
            ln -s "$localtarget" "${confbase}.d/50_local"
        fi

        for part in "${confbase}.d"/??_*; do
            if grep -q '^# --- CUT HERE ---$' "$part"; then
                csplit -s "$part" '/^# --- CUT HERE ---$/+1'
                if bash xx00; then
                    if [[ "$part" != $confbase.d/50_local ]]; then
                        echo -e "\n$comment [$(readlink -f "$part")]" >> "$target"
                    fi
                    cat xx01 >> "$target"
                fi
                rm xx0[01]
            else
                if [[ "$part" != $confbase.d/50_local ]]; then
                    echo -e "\n$comment [$(readlink -f "$part")]" >> "$target"
                fi
                cat "$part" >> "$target"
            fi
        done

        if [[ -f ${confbase}.d/50_local ]]; then
            rm "${confbase}.d/50_local"
        fi
    else
        if [[ -f $localtarget ]]; then
            cat "$localtarget" >> "$target"
        fi
    fi

    if [[ -f "$localtarget" ]]; then
        rm "$localtarget"
    fi
}

xlink() {
    local conffile=.etc/$1
    shift

    if [[ $# -ge 1 ]]; then
        local "$@"
    fi
    local target=${target:-.$(basename "$conffile")}

    info "Linking $target"

    if [[ -a "$target" && ! -L "$target" ]]; then
        error "$target is not a symlink!"
        return
    fi

    rm -f "$target"
    local dir
    dir=$(dirname "$target")
    if ! [[ -d "$dir" ]]; then
        mkdir -p "$dir"
    fi
    ln -s "$HOME/$conffile" "$target"
}

disable-autostart() {
    local filename=${1}.desktop
    info "Disabling autostart for $filename"
    mkdir -p "$HOME/.config/autostart"
    cat > "$HOME/.config/autostart/${filename}" << EOF
[Desktop Entry]
Hidden=true
EOF
}

check-program() {
    if ! command -v "$1" > /dev/null; then
        warn "$1 is not installed"
    fi
}


if [[ -z ${XDG_CONFIG_HOME:-} ]]; then
    XDG_CONFIG_HOME=$HOME/.config
fi

if [[ -z ${XDG_DATA_HOME:-} ]]; then
    XDG_DATA_HOME=$HOME/.local/share
fi

OLDPWD=$PWD
cd "$HOME"

mkdir -p "$HOME/.local/etc"
mkdir -p "$HOME"/.var/{lib,log}

ln -sf "$HOME"/.etc/.githooks/* .etc/.git/hooks

xlink Rprofile
xlink ant/ant.conf target=.ant/ant.conf
xlink aptitude
xlink awesome target=.config/awesome
xlink colorgccrc
xlink colordiffrc
xlink ctags
xlink gdbinit
xlink gnuplot/gnuplot
xlink gtk/gtkrc-2.0 target=.config/gtk-2.0/gtkrc
xlink gtk/gtk-3.0/gtk.css target=.config/gtk-3.0/gtk.css
xlink gtk/gtk-3.0/settings.ini target=.config/gtk-3.0/settings.ini
xlink idea/ideavimrc target=.config/ideavim/ideavimrc
xlink indent.pro
xlink inputrc target=.config/inputrc
xlink irbrc
xlink latexmkrc
xlink hg target=.config/hg
xlink muttator/muttatorrc
xlink ncmpcpp target=.config/ncmpcpp
xlink ranger target=.config/ranger
xlink redshift.conf target=.config/redshift.conf
xlink rofi target=.config/rofi
xlink slrn/slrnrc
merge sshconfig target=.ssh/config
mkdir -p .ssh/sock
xlink urxvt
xlink weechat target=.config/weechat
xlink zathurarc target=.config/zathura/zathurarc

xlink shell-common/profile
xlink bash/bashrc
xlink bash/bash_profile
xlink bash/bash_logout

xlink zsh/zshenv
if ! [[ -d "$HOME/.var/lib/zsh/zinit" ]]; then
    git clone https://github.com/zdharma/zinit.git "$HOME/.var/lib/zsh/zinit/bin"
fi

if ! [[ -e "$XDG_CONFIG_HOME/alacritty/alacritty.yml" ]]; then
    echo "Generating Alacritty config"
    mkdir -p "$XDG_CONFIG_HOME/alacritty"
    cat > "$XDG_CONFIG_HOME/alacritty/alacritty.yml" << EOF
import:
    - $HOME/.etc/alacritty/alacritty.yml
    - $XDG_CONFIG_HOME/alacritty/theme.yaml
EOF
    cat > "$XDG_CONFIG_HOME/alacritty/theme.yaml" << EOF
import:
    - $HOME/.etc/alacritty/desert-theme.yaml
EOF
fi

xlink emacs/emacs
xlink emacs/emacs.d

xlink git/gitconfig target=.config/git/config
merge git/gitignore target=.config/git/ignore
xlink git/attributes target=.config/git/attributes
ln -sf "$HOME/.config/git/ignore" "$HOME/.agignore"
xlink git/tigrc target=.config/tig/config
mkdir -p "$XDG_DATA_HOME/tig"

xlink tmux/tmux.conf
info "Installing tmux plugins"
if ! [[ -d $HOME/.var/lib/tmux/plugins/tpm/.git ]]; then
    git clone https://github.com/tmux-plugins/tpm.git "$HOME/.var/lib/tmux/plugins/tpm"
fi
if command -v tmux >/dev/null; then
    if tmux server-info &>/dev/null; then
        "$HOME/.var/lib/tmux/plugins/tpm/scripts/install_plugins.sh"
    else
        tmux start-server
        tmux new-session -d
        "$HOME/.var/lib/tmux/plugins/tpm/scripts/install_plugins.sh"
        tmux kill-server
    fi
fi

xlink mail/dovecot.sieve target=.config/dovecot.sieve
xlink mail/goobookrc
xlink mail/lbdb
xlink mail/msmtprc target=.config/msmtp/config
xlink mail/t-prot target=.config/t-prot
xlink offlineimap target=.config/offlineimap

xlink mutt target=.config/mutt

xlink vim
xlink vim target=.config/nvim
if ! [[ -d $HOME/.var/lib/vim/bundles/ ]]; then
    git clone https://github.com/Shougo/neobundle.vim "$HOME/.var/lib/vim/bundles/neobundle.vim"
fi
xlink vintrc.yaml

mkdir -p "$HOME/.var/spool/anacron"
crontab "$HOME/.etc/crontab/crontab"

xlink less/lessfilter
merge less/lesskey target=/tmp/lesskey$$
lesskey /tmp/lesskey$$
rm /tmp/lesskey$$

disable-autostart mpd
disable-autostart mpdris2
disable-autostart tracker-store

for file in .etc/systemd/*; do
    src="${file##.etc/}"
    filename="$(basename "$src")"
    xlink "$src" target=.config/systemd/user/"$filename"
done
systemctl --user enable daily.timer
systemctl --user start daily.timer


if command -v X >/dev/null; then
    xlink xorg/fontconfig target=.config/fontconfig
    #xlink xorg/XCompose
    #xlink xorg/Xresources
    #xlink xorg/xinitrc
    #xlink xorg/xinput.d
    #xlink xorg/xinputrc
    xlink xorg/xsession
    xlink xorg/xsessionrc

    xlink icons/Faenza-Darkest target=.local/share/icons/Faenza-Darkest

    FONTDIR=$HOME/.local/share/fonts
    mkdir -p "$FONTDIR"
    for fontf in .etc/xorg/fonts/*.bdf; do
        font=$(basename "${fontf}")
        font=${font%.bdf}
        info "Installing font ${font}"
        bdftopcf -o "$FONTDIR/${font}.pcf" "${fontf}"
        gzip -f "$FONTDIR/${font}.pcf"
    done
    cd "$FONTDIR"
    mkfontdir
    cd "$HOME"
    xset -fp "$FONTDIR" 2> /dev/null
    xset +fp "$FONTDIR"
    fc-cache

    if command -v gsettings >/dev/null; then
        gsettings set org.gtk.Settings.FileChooser startup-mode cwd
        gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
        gsettings set org.gnome.settings-daemon.plugins.keyboard active false || true
    fi

    python3 -m pip install ueberzug

    check-program autorandr
    check-program awesome
    check-program dex
    check-program inputplug
    check-program light
    check-program notify-send
    check-program rofi
    check-program wmctrl
    check-program xclip
    check-program xinput
    check-program xsecurelock
    check-program xsettingsd
    check-program xss-lock
fi

if command -v python >/dev/null; then
    cd .etc/python/lib/desert
    info "Installing python lib: desert"
    python setup.py install --user >/dev/null
    python3 setup.py install --user >/dev/null
    cd "$HOME"

    xlink python/pylintrc target=.config/pylintrc
    xlink python/mypy.ini target=.config/mypy/config
    xlink python/isort.cfg
fi

for tinfof in .etc/terminfo/*; do
    tinfo=$(basename "${tinfof}")
    tinfo=${tinfo%.terminfo}
    info "Compiling terminfo ${tinfo}"
    tic "$tinfof"

    # also install termcap data if the shell is linked against it
    if ldd "$(command -v bash)" | grep -q libtermcap; then
        info "termcap in use, appending ${tinfo} to ~/.termcap"
        if [[ -f .termcap ]] && ! grep -qE "^${tinfo}\|" .termcap; then
            tic -C -T "${tinfof}" >> .termcap
        else
            tic -C -T "${tinfof}" > .termcap
        fi
    fi
done

if ! locale -a | command grep -q en_GB.UTF-8; then
    warn "en_GB.UTF-8 locale must be installed"
fi

(
    set +eE
    cd "$HOME/.etc"
    if (( $(git submodule status | grep -c '^-') != 0 )); then
        warn "Some submodules are not initialized"
    fi
)

if command -v rustup > /dev/null; then
    rustup completions zsh rustup >| ~/.local/etc/zshfunc/_rustup
    rustup completions zsh cargo >| ~/.local/etc/zshfunc/_cargo
fi


cd "$OLDPWD"
